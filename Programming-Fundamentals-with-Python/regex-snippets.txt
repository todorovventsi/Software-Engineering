.       - Any Character Except New Line
\d      - Digit (0-9)
\D      - Not a Digit (0-9)
\w      - Word Character (a-z, A-Z, 0-9, _)
\W      - Not a Word Character
\s      - Whitespace (space, tab, newline)
\S      - Not Whitespace (space, tab, newline)

\b      - Word Boundary
\B      - Not a Word Boundary
^       - Beginning of a String
$       - End of a String

[]      - Matches Characters in brackets
[^ ]    - Matches Characters NOT in brackets
|       - Either Or
( )     - Group
\n      - Backreference to a group where "n" is the referance group number


Quantifiers:
*       - 0 or More
+       - 1 or More
?       - 0 or One
{3}     - Exact Number
{3,4}   - Range of Numbers (Minimum, Maximum)


Lookarounds:
(?<=)   - positive lookbehind
(?=)    - positive lookahead
(?<!)   - negative lookbehind
(?!)    - negative lookahead


#### Sample Regexs ####

[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+


#### re module Methods ####

    .findall(pattern, text) - returns a list with all matches or an empty list if there is no matches
    .search(pattern, text) - returns a "Match object" of the first occurrence of the pattern in the text.
                             If there is no match returns "None"
    .match(pattern, text) - returns a re.match object
    .finditer(pattern, text) - returns iterable object similar to map() and filter()



    ### Match object methods ###

        .group() - return the match itself
        .groupdict() - returns a list of dictionaries for every match where the group name is the key and the groupmatch is the value of the kvp
                       works with finditer()
        .start() - returns the starting index of the match
        .end() - returns the ending index of the match (exclusive)